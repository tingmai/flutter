Laravel 11 API & Flutter
=============================

pubspec.yaml
-------------


dependencies:

http:^0.13.3
shared_preference: ^2.0.6
image_picker: ^0.7.5+4


======================================= 

Anroid/app/src/main/AndroidManifest.xml

<package="com.app1">
=> <uses permission android:name="android.permission.INTERNET"/>
<application
    	android:label="app1"
	android:icocn="'@mipmap/ic_launcher"
	=> android:usesCleartextTraffic="true"
	=> android:requestLegacyExternalStorage="true">



	<activity
	android:launchMode="singleTop"
	android:theme="stle/LaunchTheme"
	android:configChannges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|lacale|layoutDirection|fontScale|
	android:hardwareAcelerated="true"
	android:windowSoftInputMode="adjustResize"


    ...
     ...


==============================================


android/app/src/build.gradle


	defaultConfig{
		applicationId "com.app1"
		=>minSdkVersion 21
		targestSdkVersion 30
		versionCode flutterVersionCode.toInteger()
		versionName flutterVersionName

============================================




create the folders:


pages
services
models


pages
	-loading.dart
	-login.dart
	-register.dart
	-profile.dart
	-logout.dart


services
	- 


models
	User.dart


============================================

loading.dart


class _LoadingState extends State<Loading>{


void _loadUserInof() async{
   String token=await getToken();
  	 if(token==''){
	Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder:(context)=>Login()),(route)=>false);
   	}
	else{

	ApiResponse response=await getProfile();

	if(response.error==null){

          Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder:(context)=>Login()),(route)=>false);
	}
	else if(response.error==unauthorized){
           Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder:(context)=>Login()),(route)=>false);
	}
	else{
		ScaffoldMessenger.of(context).showSnackBar(SnackBar(
		content: Text('${response.error}'),
		));

	}
	

	}
}


@overrite
void initState(){

	_loadUserInfo();
	super.initState();

}


@overrite
Widget build(BuildContext context){
return Container(

	height:Mediaquery.of(context).size.height,
	color:Color.white,
	child: Center(
		child:CircularProgressIndicator(),
	),
);

}

}

==========================================
models/api_response.dart

class ApiResponse{

	Object? data;
	String? error;

}

====================================================

models/user.dart


class User{

	int? id;
	String? name;
	String? image;
	String? email;
	String? token;


	User({
		this.id,
		thihs.name,
		this.image,
		this.email,
		this.token
	});

	factory User.fromJson(Map<String,dynamic> json){
		
		return User(
			id: json['user']['id'],
			name:json['user']['name'],
			image:json['user']['image'],
			email:json['user']['email'],
			token:json['user']['token']
		);

	}

}



======================================

lib/constant.dart


const baseUrl='http://localhost:8000/api';
const loginUrl=baseUrl+'/login';
const registterUrl=baseUrl+'/register';
const logoutUr=baseUrl +'/logout';
const userUrl=baseUrl +'/users';
const postUrl=baseUrl + '/posts';
const commentsUrl=baseUrl + '/comments';

const serverError='Server Error';
const unauthorized='Unauthorized';
const somethingWentWrong='Something went wrong, try again...';


//-- input decoration
InputDecoration kInputDecoration(String label){

  return InputDecoration(
	   labelText:label,
	   contentPadding:EdgeInsets.all(10),
	   border:OutlineInputBorder(borderSide:BorderSide(width:1,color:Colors.gray));
	);


}


//button
TextButton myTextButton(String label,Function onPressed){

	return TextButton(
		child:Text(label,style:TextStyle(color:Colors.white),),
		style:ButtonStyle(
			backgroundColor:MasterialStateColor.resolveWith((states)=>Colors.blue),
			padding:MaterialStateProperty.resolveWith((states)=>EdgeInsets.symmetric(vertical:10)),
		),
		onPressed: ()=>onPressed(),

	);

}

//login Register Hints

Row myLoginRegisterHint(String text,String label,Function onTap){

return Row(
	
	mainAxisAligment: MainAxisAligment.center,
	children:[
	  Text: (text),
	  GustureDetector(
	       text: Text(label,style:TextStyle(color:Colors.blue)),
	        onTap:()=>onTap,
	  ),

	],


);

}

=================================================


services/userr_uservice.dart


import 'package:app1/constant.dart';
import 'package:app1/models/api_response.dart';
import 'package:app1/models/user.dart';
import 'package:http/http.dart' as http;



//login
Future<ApiResponse> login(String email,String password) assync{

	ApiResponse apiResponse=ApiResponse();

	try{

	final response=await http.post(

	   	Uri.parse(loginUrl),
		headers:{'Accept':'application/json'},
		body: {'email':email,'password':password}

	);


	switch(response.statusCode){


		case 200:
			apiResponse.data=User.fromJson(jsonDecode(response.body));
		break;
		case 422:
			final errors=jsonDecode(response.body)['errors'];
			apiResponse.error=errors[errors.keys.elementAt(0)][0];

		break;
		case 403:
			apiResponse.error=jsonDecode(response.body)['message'];
		break;
		default:
			apiResponse.error=somethingWentWrong;
		break;




	}

	catch(err){

           apiResponse.error=serverError;
	}


   return apiResponse;
}
 


//register
Future<ApiResponse> register(String username,String email,String password) assync{

	ApiResponse apiResponse=ApiResponse();

	try{

	final response=await http.post(

	   	Uri.parse(registerUrl),
		headers:{'Accept':'application/json'},
		body: {'name':name,'email':email,'password':password,'c_password':password}

	);


	switch(response.statusCode){


		case 200:
			apiResponse.data=User.fromJson(jsonDecode(response.body));
		break;
		case 422:
			final errors=jsonDecode(response.body)['errors'];
			apiResponse.error=errors[errors.keys.elementAt(0)][0];

		break;
		case 403:
			apiResponse.error=jsonDecode(response.body)['message'];
		break;
		default:
			apiResponse.error=somethingWentWrong;
		break;




	}

	catch(err){

           apiResponse.error=serverError;
	}


   return apiResponse;
}


//profile page


Future<ApiResponse> getProfile() async{

	ApiResponse apiResponse=ApiResponse();

	try{
	String token=await getToken();
	final response=await http.post(

	   	Uri.parse(userUrl),
		headers:{'Accept':'application/json', 'Authorization':'Bearer $token'},
		

	);


	switch(response.statusCode){


		case 200:
			apiResponse.data=User.fromJson(jsonDecode(response.body));
		break;
		case 422:
			final errors=jsonDecode(response.body)['errors'];
			apiResponse.error=errors[errors.keys.elementAt(0)][0];

		break;
		case 403:
			apiResponse.error=jsonDecode(response.body)['message'];
		break;
		default:
			apiResponse.error=somethingWentWrong;
		break;




	}

	catch(err){

           apiResponse.error=serverError;
	}


   return apiResponse;

}





//get token
Future<String> getToken() async{

	SharedPreferences pref=await SharedPreferences.getInstance();
	return perf.getString('token') ?? '';

}

//get user id
Future<int> getToken() async{

	SharedPreferences pref=await SharedPreferences.getInstance();
	return perf.getInt('userId') ?? 0;

}


//logout
Future<bool> logout() async{

	SharedPreferences pref=await SharedPreferences.getInstance();
	return await pref.remove('token');

}




=========================

login.dart


class _LoginState extends State<Login>{


final GlobalKey<FormState> formkey=GlobalKey<FormState>();
textEditingController textEmail=textEditingController();
textEditingController textPassword=textEditingController();


void _loginUser() async{

	ApiResponse response=await login(textEmail.text,textPassword.text);

	if(response.error==null){
		_saveAndRedirectToProfile(response.data as User)

	}

	else{

		ScaffoldMessenger.of(context).showSnackBar(SnackBar(
			content:Text('${response.error}')
		));
	}
}


void _saveAdRedirectToProfile(User user)async{

	SharedPreferences pref=await SharedPreferences.getInstance();
	await pref.setString('token',user.token ?? '');
	await pref.setInt('userId',user.id ?? 0);
	Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder:(context)=>Profile()),(route)=>false);

}



@override
Widget build(BuildContext context){


body:form(

	key:formkey,
	child:ListView(
		padding:EdgeInsets.all(32),
		children:[
			
		textformField(
			keyboardType:TextInputType.emailAddress,
			controller:textEmail,
			validator:(val) => val!.isEmpty ? 'Invalid Email Address' : null,
			decoration:kInputDecoration('Email'),
			
		 ),

		SizedBox(height:10,),

		textformField(
			
			controller:textPassword,
			obscureText:true,
			validator:(val) => val!.length<6 ? 'Required at least 6 chars' : null,
			decoration:decoration:kInputDecoration('Email'),
		 ),

		SizedBox(height:10,),
		TextButton(

			child: Text('Login', style:TextStyle(color:Colors.white),),
			style:ButtonStyle(
				backgroundColor:MaterialStateColor.resolvewith((states) => Colors.blue),
				padding:MaterialStateProperty.resolveWith((states)=>EdgeInserts.symmetric(verticl:10))
			),

			onPressed:(){
				if(formkey.currentState!.validate()){
				    _loginUser();

				}
			},

		),

		SizedBox(height:10,),

		/*
		Row(
			mainAxisAligment: MainAxisAlignment.center,
			children:[

				Text('Dont have an account?'),
				GestureDector(
				   child: Text
				),
			],
		  ),*/
		  
		 myLoginRegisterHint('Dont have an account?','Regiser',(){
			Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder:(context)=>Register()),(route)=>false);

		})


		]
	),
	),



}




}




===============================


register.dart


import 'package:app1/models/api_response.dart';
import 'package:app1/models/user.dart';
import 'package:app1/views/profile.dart';
import 'package:app1/services/user_service.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../constant.dart';
import 'login.dart';




class Register extends StatefulWidget{

	@override
	_RegisterState createState()=>_RegisterState();
}

class _RegisterState extends State<Register>{

     GlobalKey<FormState> formkey=GlobalKey<FormState>();

	bool loading=false;
	TextEditingController nameController=TextEditingController();
	TextEditingController emailController=TextEditingController();
	TextEditingController passwordController=TextEditingController();
	TextEditingController confirmPasswordController=TextEditingController();


	void _registerUser() async{

		ApiResponse response= await register(nameController.text,emailController.text,passwordController.text);

		if(response.error==null){
			_saveAndRedirectToProfile(response.data as User);
			

		}
		else{
		      setState((){

			loading=!loading;

			});

			ScaffoldMessage.of(context).showSnackBar(SnackBar(
				context:Text('${responsee.error}')
			));

		
		}

	}


       @override
	Widget build(BuildContext context){

	return Scaffold(

		AppBar:AppBar(
		   title:Text('Regiser'),
			centerTitle:true,
		 ),
		body:Form(

			key:formkey,
			child: ListView(
				
				padding:const EdgeInserts.symmetric(horizontal:12,vertical 32),
				children:[
					
				TextFormField(
				controller:nameController,
				validator:(val)=>val!.isEmpty ? 'Invalid name ' : null,

				decoration: myInputDecoration('Name")
				), //TextFormField

				SizedBox(height:20,),


				TextFormField(
				controller:nameController,
				validator:(val)=>val!.isEmpty ? 'Invalid name ' : null,

				decoration: myInputDecoration('Email")
				), //TextFormField

				SizedBox(height:20,),


				TextFormField(
				controller:nameController,
				obscureText:true,
				validator:(val)=>val!.length < 6 ? 'Invalid name ' : null,

				decoration: myInputDecoration('Password")
				), //TextFormField


				SizedBox(height:20,),


				TextFormField(
				controller:nameController,
				obscureText:true,
				validator:(val)=>val !=passwordController.text ? 'Confirm Password does not match ' : null,

				decoration: myInputDecoration('Confirm Password")
				), //TextFormField

				
 				SizedBox(height:20,),


				loading? Center(child:CircularProgressIndicataor()):
				myTextButton('Register',(){
					if(formkey.currentState!.validate()){
						setState((){

						loading=!loading;
						_registerUser();

						});

					}
				}

				]

			),
		),



			

	);

	}


}

=========================================

views/profile.dart
-----------------

import 'package:flutter/material.dart';

import '../constant.dart';
import 'login.dart';



class Profile extends StatefulWidget{

	@override
	_ProfileState createState()=>_ProfileState();
}

class _ProfileState extends State<Profile>{

	@override
	Widget build(BuildContext context){

	return scaffold(
		body: Center(
			
			child: Column(
			
			children:[

			Text ('Profile Page'),
			SizedBox(height:20),
	  		GustureDetector(
	       			child: Text('Logout',style:TextStyle(color:Colors.blue)),
	        		onTap:(){

				logout().then((value)=>{
					Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder: (context) => Login()), (route) =>false);
					
                                   });
				},
	  			),

			],

			),
		),
		);

	}
}

================================



views/home.dart

import 'package:flutter/material.dart';

import '../constant.dart';
import 'login.dart';



class Home extends StatefulWidget{

	@override
	_HomeState createState()=>_HomeState();
}

class _HomeState extends State<Home>{

	int currentIndex=0;

	@override
	Widget build(BuildContext context){

	return scaffold(
		appBar:AppBar(
		  title:Text('NC App'),
		  actions:[

			IconButton(
				icon:Icon(Icons.exit_to_app),
				onPressed: (){

					logout().then((value)=>{
					
					Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder:(context)=>Login()),(route)=>false);

					});
				},
			)
		]
		),
		
		body: currentIndex=0 ? PostIndex() : Profile(),

		FloatActionButton:FloatingActionButton(

			onPressed: (){
			
				Navigator.of(context).push(MaterialPageRoute(builder:(context) => PostCreate()),(context)=>false),

			},
			child:Icon(Icon.add),

		),
		floatingActionButtonLocation:FloatingActionButtonLocation.centerDocked,

		bottomNavigationBar: BottomAppBar(
			notchMargin:5,
			elevatioon:10,
			clipBehavior:Clip.antiAlias,
			shape:CircularNotchedRectangle(),
		
			items:[
				BottomNavigationBarItem(
					icon:Icon(Icons.home),
					label:''
				),
				BottomNavigationBarItem(
					icon:Icon(Icons.list),
					label:''
				),
				BottomNavigationBarItem(
					icon:Icon(Icons.money),
					label:''
				),
				BottomNavigationBarItem(
					icon:Icon(Icons.person),
					label:''
				),
			
			],

			currentIndex:currentIndex,
			onTap:(val){
			setState((){

				currentIndex=val;
			});

			},

		),
		
	);

	}
}


===============================================


views/posts.dart


return scaffold(

	appBar:AppBara(

		title:Text('Post Index'),
		
	),

	body: 



);




=================================================

view/post_create.dart


views/posts.dart


import 'package:app1/constant.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';





class _PostCreateState extends State<PostCreate>{

final Global<FormState> _formkey=GlobalKey<FormState>();
final TextEditingController _textBodyController=TextEditingController();
bool loading= false;

file imageFile;
final _imgPicker=imagePicker();

Future getImage() async{

	final pickedFile=await _picker.getImage(source:ImageSource.gallery);
	if(pickedFile !=null){
		seteState((){
                   _imageFile=File(pickedFile.path);
		});
		
	}

}


return scaffold(

	appBar:AppBara(

		title:Text('Post Create'),
		
	),

	body: ListView(

		children:[
		 Container(

			width:MediaQuery.of(context).size.width,
			height:200,
			child:Center(
			    child:IconButton(
				icon:Icon(Icons.image, size:50, color.black38),
				onPressed:(){
					getImage();
				}
				),
			),
		), //Container


		Form(
			key: _formkey,
			child:Padding(
				padding:EdgeInsets.all(8),
				child:TextFormField(
					
					keyboardType:TextInputType.multiline,
					maxlines:9,
					controller:_textBodyController,
					validator:(val) => val!.isEmpty ? 'Post contents is required' : null,
					decoration:InputDecoration(

					hintText: 'Post Body ... ',
					border: OutlineInputBorder(borderSide:BorderSide(width:1,color:colors.black38)),

					),

				),
			),

		),//Form

		Padding(
			padding:EdgeInsets.symmetric(horizontal:8),
			child:myTextButton('Post',(){

				if(_formkey.currentState!.validate()){
				setState((){
				_loading=!_loading;
				});

				}
			}),
		),

		],
	

	),



);




}


}



====================================================





