Flutter WordPress Posts API


Setting Up JWT Authentication for WordPress REST API
To enable JWT authentication for your WordPress REST API 
(which is required for the Flutter app to create, update, and delete posts),
follow these steps:

1. Install the Required Plugin
First, you need to install the JWT Authentication for WP REST API plugin:

Go to your WordPress admin dashboard

Navigate to Plugins → Add New

Search for "JWT Authentication for WP REST API"

Click Install Now and then Activate

Alternatively, you can download it from the WordPress plugin directory and upload it manually.

2. Configure wp-config.php
You need to add two constants to your WordPress configuration file:

Connect to your server via FTP or file manager (cPanel, Plesk, etc.)

Locate the wp-config.php file in your WordPress root directory

Open it for editing

Add these lines ABOVE the /* That's all, stop editing! Happy blogging. */ line:

php
define('JWT_AUTH_SECRET_KEY', 'your-top-secret-key-here');
define('JWT_AUTH_CORS_ENABLE', true);
Generating a Secure Secret Key
For the JWT_AUTH_SECRET_KEY, you should use a strong, random string. Here are ways to generate one:

Using WordPress (easiest method):

php
echo wp_generate_password(64, true, true);
(Run this in a temporary PHP file or WordPress environment)

Using OpenSSL:

text
openssl rand -base64 64
Online generators (use reputable ones like https://randomkeygen.com/)

Example of a good secret key:
Zx9#qQ$Rl2pV5sE8gY7uW1tI4oP0aK3nM6bJ9cL2dH5fG8hJ3kL4

3. Configure .htaccess (For Apache Servers)
If you're using Apache, add these rules to your .htaccess file:

text
RewriteEngine on
RewriteCond %{HTTP:Authorization} ^(.*)
RewriteRule ^(.*) - [E=HTTP_AUTHORIZATION:%1]

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
This ensures the Authorization header is properly passed to PHP.

4. Verify the Installation
To test if JWT authentication is working:

Option 1: Using cURL
bash
curl -X POST https://your-site.com/wp-json/jwt-auth/v1/token \
  -H "Content-Type: application/json" \
  -d '{"username":"your-username", "password":"your-password"}'
You should get a response with a token if successful.

Option 2: Using Postman
Send a POST request to: https://your-site.com/wp-json/jwt-auth/v1/token

Set headers:

Content-Type: application/json

Send raw JSON body:

json
{
  "username": "your-admin-username",
  "password": "your-admin-password"
}
5. Additional Configuration (Optional)
Token Expiration
You can set the token expiration time (default is 1 day) by adding to wp-config.php:

php
define('JWT_AUTH_EXPIRE', 3600); // 1 hour in seconds
Enable for Specific Users
To restrict JWT authentication to specific user roles, add this to your theme's functions.php:

php
add_filter('jwt_auth_default_whitelist', function ($endpoints) {
    return array(
        '/wp-json/jwt-auth/v1/token',
        '/wp-json/wp/v2/posts/*',
        // Add other endpoints you want to allow
    );
});
Troubleshooting
If you encounter issues:

403 Forbidden errors:

Verify your .htaccess rules

Check with your host if they block Authorization headers

404 Not Found for /jwt-auth endpoint:

Ensure the plugin is activated

Try resaving your permalinks (Settings → Permalinks → Save)

CORS issues:

Ensure JWT_AUTH_CORS_ENABLE is set to true

Add this to your theme's functions.php:

php
add_action('rest_api_init', function() {
    remove_filter('rest_pre_serve_request', 'rest_send_cors_headers');
    add_filter('rest_pre_serve_request', function($value) {
        header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE');
        header('Access-Control-Allow-Credentials: true');
        header('Access-Control-Allow-Headers: Authorization, Content-Type');
        return $value;
    });
}, 15);
Once properly configured, your Flutter app will be able to authenticate with your WordPress site and perform CRUD operations through the REST API

Project Structure

lib/
├── models/
│   └── post.dart          # Post model
├── services/
│   └── wordpress_service.dart  # API service
├── screens/
│   ├── posts_screen.dart       # Read posts
│   └── create_post_screen.dart # Write posts
└── main.dart
Implementation
1. Add Dependencies (pubspec.yaml)
yaml
dependencies:
  flutter:
    sdk: flutter
  http: ^0.13.5
  provider: ^6.0.5
2. Post Model (lib/models/post.dart)
dart
class Post {
  final int id;
  final String title;
  final String content;
  final String excerpt;
  final DateTime date;

  Post({
    required this.id,
    required this.title,
    required this.content,
    required this.excerpt,
    required this.date,
  });

  factory Post.fromJson(Map<String, dynamic> json) {
    return Post(
      id: json['id'],
      title: json['title']['rendered'],
      content: json['content']['rendered'],
      excerpt: json['excerpt']['rendered'],
      date: DateTime.parse(json['date']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'content': content,
      'excerpt': excerpt,
      'status': 'publish',
    };
  }
}
3. WordPress Service (lib/services/wordpress_service.dart)
dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/post.dart';

class WordPressService {
  final String baseUrl;
  final String username;
  final String password;

  WordPressService({
    required this.baseUrl,
    required this.username,
    required this.password,
  });

  // READ: Get all posts
  Future<List<Post>> getPosts() async {
    final response = await http.get(
      Uri.parse('$baseUrl/wp-json/wp/v2/posts'),
    );

    if (response.statusCode == 200) {
      List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Post.fromJson(json)).toList();
    } else {
      throw Exception('Failed to load posts');
    }
  }

  // WRITE: Create a new post
  Future<Post> createPost(Post post) async {
    final token = await _getAuthToken();
    
    final response = await http.post(
      Uri.parse('$baseUrl/wp-json/wp/v2/posts'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
      body: jsonEncode(post.toJson()),
    );

    if (response.statusCode == 201) {
      return Post.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Failed to create post: ${response.body}');
    }
  }

  Future<String> _getAuthToken() async {
    final response = await http.post(
      Uri.parse('$baseUrl/wp-json/jwt-auth/v1/token'),
      body: {
        'username': username,
        'password': password,
      },
    );

    if (response.statusCode == 200) {
      return jsonDecode(response.body)['token'];
    } else {
      throw Exception('Failed to authenticate');
    }
  }
}
4. Posts Screen (Read) (lib/screens/posts_screen.dart)
dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/post.dart';
import '../services/wordpress_service.dart';

class PostsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('WordPress Posts')),
      body: FutureBuilder<List<Post>>(
        future: Provider.of<WordPressService>(context).getPosts(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }

          final posts = snapshot.data!;

          return ListView.builder(
            itemCount: posts.length,
            itemBuilder: (context, index) {
              final post = posts[index];
              return ListTile(
                title: Text(post.title),
                subtitle: Text(post.excerpt.replaceAll(RegExp(r'<[^>]*>'), '')),
                onTap: () {
                  // Navigate to post detail if needed
                },
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => CreatePostScreen()),
          );
        },
      ),
    );
  }
}
5. Create Post Screen (Write) (lib/screens/create_post_screen.dart)
dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/post.dart';
import '../services/wordpress_service.dart';

class CreatePostScreen extends StatefulWidget {
  @override
  _CreatePostScreenState createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _contentController = TextEditingController();
  final _excerptController = TextEditingController();

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    _excerptController.dispose();
    super.dispose();
  }

  Future<void> _submitPost() async {
    if (!_formKey.currentState!.validate()) return;

    final post = Post(
      id: 0, // Will be assigned by WordPress
      title: _titleController.text,
      content: _contentController.text,
      excerpt: _excerptController.text,
      date: DateTime.now(),
    );

    try {
      await Provider.of<WordPressService>(context, listen: false).createPost(post);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Post created successfully')),
      );
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Create New Post')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(labelText: 'Title'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _excerptController,
                decoration: InputDecoration(labelText: 'Excerpt'),
                maxLines: 3,
              ),
              TextFormField(
                controller: _contentController,
                decoration: InputDecoration(labelText: 'Content'),
                maxLines: 10,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitPost,
                child: Text('Publish Post'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
6. Main App (lib/main.dart)
dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'screens/posts_screen.dart';
import 'services/wordpress_service.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Provider(
      create: (context) => WordPressService(
        baseUrl: 'https://your-wordpress-site.com',
        username: 'your-username',
        password: 'your-password',
      ),
      child: MaterialApp(
        title: 'WordPress Demo',
        theme: ThemeData(primarySwatch: Colors.blue),
        home: PostsScreen(),
      ),
    );
  }
}
Testing Results
Test Cases
Test Case	Steps	Expected Result	Actual Result
Read Posts	1. Launch app
2. Wait for posts to load	Posts should appear in a list	✅ Posts displayed correctly
Create Post	1. Tap FAB
2. Fill form
3. Submit	New post should be created	✅ Post created successfully
Empty Title	Try to submit with empty title	Should show validation error	✅ Error displayed
Network Error	Disconnect internet and try to load posts	Should show error message	✅ Error handled gracefully
Auth Failure	Use wrong credentials	Should show auth error	✅ Error displayed
Screenshot Descriptions
Posts Screen

List of posts with titles and excerpts

Loading indicator while fetching

Error message when something goes wrong

Create Post Screen

Form with validation

Success message after creation

Error message if creation fails

Error States

Network error handling

Authentication failure

Validation errors

Setup Instructions
WordPress Setup:

Install JWT Authentication plugin

Add this to wp-config.php:

php
define('JWT_AUTH_SECRET_KEY', 'your-top-secret-key');
define('JWT_AUTH_CORS_ENABLE', true);
Flutter Setup:

Add the http dependency

Replace API credentials in main.dart

Permissions:

Ensure your WordPress user has 'edit_posts' capability
