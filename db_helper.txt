import 'package:flutter/foundation.dart';
import 'package:sqflite/sqflite.dart' as sql;

class DbHelper {

      /* -------create new table-------- */

       static Future<void> createTables(sql.Database database) async{

          await database.execute(
            """
             CREATE TABLE items(
             id INTEGER NOT NULL AUTOINCREMENT PRIMARY KEY,
             name TEXT,
             price INTEGER,
             createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
             )

            """);
         
       }

      /* -------create database-------- */

      static Future<sql.Database> db() async{
        return sql.openDatabase(
          'testdb.db',
          version:1,
          onCreate: (sql.Database database,int version) async{

              await createTables(database);
          }

        );
      } 
      

      /*-----create new item ------*/

      static Future<int> createItem(String name,int price) async{

        final db=await DbHelper.db();

        final data={'name':name,'price':price};
        final id=db.insert(
              'items', 
              data,
              conflictAlgorithm: sql.ConflictAlgorithm.replace
              );


        return id;
      }


      /* ---- get all items ---- */

      static Future<List<Map<String,dynamic>>> getItems() async{
           final db=await DbHelper.db();
           return db.query('items',orderBy:"id");

      }

      /* ---- get one item by id ---- */

      static Future<List<Map<String,dynamic>>> getItem(int id) async{

          final db=await DbHelper.db();
          return db.query('items',where:"id=?",whereArgs: [id],limit: 1);
      }


      /*----- update one item by id ---- */

      static Future<int> upateItem(int id,String name,int price) async{
          final db=await DbHelper.db();

          final data={
            'name':name,
            'price':price,
            'createdAt':DateTime.now().toString()
          };

          final result=db.update('items',data, where:"id=?",whereArgs: [id]);
          return result;
      }



      /* ---- delete one item by id --- */

      static Future<void> deleteItem(int id) async{

          final db=await DbHelper.db();
          try{
              await db.delete('items',where:"id=?",whereArgs: [id]);
          }
          catch(err){
            debugPrint("something went wrong $err");
          }
      }


}
