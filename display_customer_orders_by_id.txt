
Get customer id and display customer's orders
==============================================

WooCommerce မှာ direct API endpoint မရှိတဲ့အတွက် Wordpress Rest API ကနေ current user's ID ကို ယူရပါမယ်။
 WordPress REST API ထဲက user id နဲ့ WooCommerce API ထဲက Order တွေကို ဆဲထုတ်ရပါမယ်။

================================================================
1. Set up the WordPress User Service 
dart
// lib/services/wordpress_user_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class WordPressUserService {


  final String baseUrl;
  final FlutterSecureStorage storage;

  WordPressUserService({required this.baseUrl, required this.storage});

  Future<int> getCurrentUserId() async {
    try {
      final token = await storage.read(key: 'auth_token');
      
      final response = await http.get(
        Uri.parse('$baseUrl/wp-json/wp/v2/users/me'),
        headers: {'Authorization': 'Bearer $token'},
      );

      if (response.statusCode == 200) {
        final userData = json.decode(response.body);
        return userData['id'];
      } else {
        throw Exception('Failed to get user ID: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching user ID: $e');
    }
  }
}


=================================
2. WooCommerce Order Service (Updated)

==========================================


dart
// lib/services/woocommerce_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;

class WooCommerceService {
  final String baseUrl;
  final String consumerKey;
  final String consumerSecret;

  WooCommerceService({
    required this.baseUrl,
    required this.consumerKey,
    required this.consumerSecret,
  });

  Future<List<dynamic>> getCustomerOrders(int customerId) async {
    try {
      final response = await http.get(
        Uri.parse(
          '$baseUrl/wp-json/wc/v3/orders?customer=$customerId&consumer_key=$consumerKey&consumer_secret=$consumerSecret',
        ),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to load orders: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching orders: $e');
    }
  }
}


=============================
3. Authentication Service (For JWT)

================================


dart
// lib/services/auth_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class AuthService {
  final String baseUrl;
  final FlutterSecureStorage storage;

  AuthService({required this.baseUrl, required this.storage});

  Future<bool> login(String username, String password) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/wp-json/jwt-auth/v1/token'),
        body: {
          'username': username,
          'password': password,
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        await storage.write(key: 'auth_token', value: data['token']);
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }

  Future<void> logout() async {
    await storage.delete(key: 'auth_token');
  }
}


===============================
4. Order Repository (Updated)

=================================


dart
// lib/repositories/order_repository.dart
import '../services/woocommerce_service.dart';
import '../services/wordpress_user_service.dart';
import '../models/order.dart';

class OrderRepository {
  final WooCommerceService wooService;
  final WordPressUserService wpUserService;

  OrderRepository({required this.wooService, required this.wpUserService});

  Future<List<Order>> getCurrentUserOrders() async {
    try {
      final userId = await wpUserService.getCurrentUserId();
      final ordersJson = await wooService.getCustomerOrders(userId);
      return ordersJson.map((json) => Order.fromJson(json)).toList();
    } catch (e) {
      rethrow;
    }
  }
}

==================================
5. Order List Screen (Updated)

===========================================
dart
// lib/screens/order_list_screen.dart
import 'package:flutter/material.dart';
import '../repositories/order_repository.dart';
import '../services/auth_service.dart';
import '../services/woocommerce_service.dart';
import '../services/wordpress_user_service.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class OrderListScreen extends StatefulWidget {
  const OrderListScreen({Key? key}) : super(key: key);

  @override
  _OrderListScreenState createState() => _OrderListScreenState();
}

class _OrderListScreenState extends State<OrderListScreen> {
  late final OrderRepository orderRepo;
  late final AuthService authService;
  List<Order> orders = [];
  bool isLoading = true;
  String errorMessage = '';
  bool isLoggedIn = false;

  @override
  void initState() {
    super.initState();
    final storage = FlutterSecureStorage();
    final baseUrl = 'https://mobile.sbglobal.uk'; // Replace with your site URL
    
    authService = AuthService(baseUrl: baseUrl, storage: storage);
    orderRepo = OrderRepository(
      wooService: WooCommerceService(
        baseUrl: baseUrl,
        consumerKey: 'ck_your_consumer_key', // Replace with your key
        consumerSecret: 'cs_your_consumer_secret', // Replace with your secret
      ),
      wpUserService: WordPressUserService(baseUrl: baseUrl, storage: storage),
    );
    
    _checkAuthAndLoadOrders();
  }

  Future<void> _checkAuthAndLoadOrders() async {
    final token = await authService.storage.read(key: 'auth_token');
    setState(() {
      isLoggedIn = token != null;
    });

    if (isLoggedIn) {
      _loadOrders();
    }
  }

  Future<void> _loadOrders() async {
    try {
      final fetchedOrders = await orderRepo.getCurrentUserOrders();
      setState(() {
        orders = fetchedOrders;
        isLoading = false;
      });
    } catch (e) {
      setState(() {
        errorMessage = 'Failed to load orders: $e';
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('My Orders'),
        actions: [
          IconButton(
            icon: Icon(isLoggedIn ? Icons.logout : Icons.login),
            onPressed: () async {
              if (isLoggedIn) {
                await authService.logout();
                setState(() {
                  isLoggedIn = false;
                  orders = [];
                });
              } else {
                // Navigate to login screen or show login dialog
                final success = await _showLoginDialog(context);
                if (success) {
                  setState(() {
                    isLoggedIn = true;
                  });
                  _loadOrders();
                }
              }
            },
          )
        ],
      ),
      body: !isLoggedIn 
          ? Center(child: Text('Please login to view your orders'))
          : _buildOrderList(),
    );
  }

  Widget _buildOrderList() {
    if (isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (errorMessage.isNotEmpty) {
      return Center(child: Text(errorMessage));
    }

    if (orders.isEmpty) {
      return const Center(child: Text('No orders found'));
    }

    return ListView.builder(
      itemCount: orders.length,
      itemBuilder: (context, index) {
        final order = orders[index];
        return Card(
          margin: const EdgeInsets.all(8),
          child: ListTile(
            title: Text('Order #${order.id}'),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Status: ${order.status}'),
                Text('Total: ${order.total} ${order.currency}'),
                Text('Date: ${order.dateCreated.split('T')[0]}'),
                Text('Items: ${order.lineItems.length}'),
              ],
            ),
            trailing: const Icon(Icons.chevron_right),
            onTap: () {
              // Navigate to order details
            },
          ),
        );
      },
    );
  }

  Future<bool> _showLoginDialog(BuildContext context) async {
    final usernameController = TextEditingController();
    final passwordController = TextEditingController();
    
    return await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Login'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: usernameController,
              decoration: InputDecoration(labelText: 'Username'),
            TextField(
              controller: passwordController,
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () async {
              final success = await authService.login(
                usernameController.text,
                passwordController.text,
              );
              Navigator.pop(context, success);
            },
            child: Text('Login'),
          ),
        ],
      ),
    ) ?? false;
  }
}



=====================================
 ရှင်းလင်းချက်
======================================
၁. Current User ID ရရှိရန်

WooCommerce တွင် တိုက်ရိုက် API မရှိသောကြောင့် WordPress REST API /wp/v2/users/me endpoint ကိုသုံးရပါမည်

JWT authentication token လိုအပ်ပါသည်

၂. Authentication Flow

User သည် login လုပ်ရပါမည်

Login လုပ်ပြီးလျှင် JWT token ရမည်

ထို token ဖြင့် current user ID ကိုရယူမည်

၃. Order များရယူခြင်း

Current user ID ရပြီးလျှင် WooCommerce API /wc/v3/orders?customer={id} endpoint ကိုသုံးပြီး order များရယူမည်

၄. လုံခြုံရေး

JWT token ကို Flutter Secure Storage တွင်သိမ်းပါ

HTTPS သာသုံးပါ

API credentials များကို hardcode မလုပ်ပါနှင့်

၅. အသုံးပြုရန် လိုအပ်သော Plugins

WordPress ဘက်တွင် JWT Authentication for WP REST API plugin တပ်ရပါမည်

WooCommerce REST API enable လုပ်ထားရပါမည်

၆. Flutter Packages

http: API calls အတွက်

flutter_secure_storage: JWT token သိမ်းဆည်းရန်

၇. အဆင့်ဆင့် အလုပ်လုပ်ပုံ

User login လုပ်မည်

JWT token ရမည်

Token ဖြင့် current user ID ရမည်

User ID ဖြင့် order များရယူမည်

UI တွင် order များပြမည်

၈. Error Handling

Login မအောင်မြင်ခြင်း

Token invalid ဖြစ်ခြင်း

User ID မရခြင်း

Orders မရခြင်းတို့အတွက် error handling လုပ်ထားပါသည်


========================================

import 'dart:convert';
import 'package:http/http.dart' as http;

class WooCommerceService {
  final String baseUrl;
  final String consumerKey;
  final String consumerSecret;

  WooCommerceService({
    required this.baseUrl,
    required this.consumerKey,
    required this.consumerSecret,
  });

  // 1. အားလုံးသော orders များကိုရယူခြင်း
  Future<List<dynamic>> getAllOrders({int? perPage}) async {
    try {
      final response = await http.get(
        Uri.parse(
          '$baseUrl/wp-json/wc/v3/orders?per_page=${perPage ?? 10}&consumer_key=$consumerKey&consumer_secret=$consumerSecret',
        ),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to load orders: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching orders: $e');
    }
  }

  // 2. Specific customer ၏ orders များကိုရယူခြင်း
  Future<List<dynamic>> getOrdersByCustomerId(int customerId, {int? perPage}) async {
    try {
      final response = await http.get(
        Uri.parse(
          '$baseUrl/wp-json/wc/v3/orders?customer=$customerId&per_page=${perPage ?? 10}&consumer_key=$consumerKey&consumer_secret=$consumerSecret',
        ),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to load customer orders: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching customer orders: $e');
    }
  }

  // 3. Order ID အလိုက် single order ရယူခြင်း
  Future<Map<String, dynamic>> getOrderById(int orderId) async {
    try {
      final response = await http.get(
        Uri.parse(
          '$baseUrl/wp-json/wc/v3/orders/$orderId?consumer_key=$consumerKey&consumer_secret=$consumerSecret',
        ),
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        throw Exception('Failed to load order: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching order: $e');
    }
  }
}

============================
