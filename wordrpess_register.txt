implementing Customer Registration in Flutter with WooCommerce
----------------------------------------------------------


Prerequisites
WordPress with WooCommerce installed

WooCommerce REST API keys (consumer key and secret)

Flutter development environment

Step 1: Set Up WooCommerce API Permissions
In WordPress admin, go to WooCommerce → Settings → Advanced → REST API

Edit your existing API key or create a new one

Ensure permissions include "Write customers"




Step 2: Add Required Dependencies
Add these to your pubspec.yaml:

yaml
dependencies:
  flutter:
    sdk: flutter
  http: ^0.13.5
  dio: ^5.3.2
  provider: ^6.0.5



==========================
Step 3: Create Registration Model

----------------------------
Create registration_model.dart:

dart
class RegistrationRequest {
  final String email;
  final String username;
  final String password;
  final String firstName;
  final String lastName;

  RegistrationRequest({
    required this.email,
    required this.username,
    required this.password,
    required this.firstName,
    required this.lastName,
  });

  Map<String, dynamic> toJson() => {
    'email': email,
    'username': username,
    'password': password,
    'first_name': firstName,
    'last_name': lastName,
  };
}

class RegistrationResponse {
  final int? customerId;
  final String? error;

  RegistrationResponse({this.customerId, this.error});

  factory RegistrationResponse.fromJson(Map<String, dynamic> json) {
    return RegistrationResponse(
      customerId: json['id'],
      error: json['message'],
    );
  }
}


==================================
Step 4: Create Registration Service


Create registration_service.dart:

dart
import 'package:dio/dio.dart';
import 'registration_model.dart';

class RegistrationService {
  final Dio _dio = Dio();
  final String baseUrl;

  RegistrationService({required this.baseUrl}) {
    _dio.options.baseUrl = baseUrl;
    _dio.options.headers['Content-Type'] = 'application/json';
  }

  Future<RegistrationResponse> register(RegistrationRequest request) async {
    try {
      final response = await _dio.post(
        '/wp-json/wc/v3/customers',
        data: request.toJson(),
        queryParameters: {
          'consumer_key': 'YOUR_CONSUMER_KEY',
          'consumer_secret': 'YOUR_CONSUMER_SECRET',
        },
      );

      return RegistrationResponse(customerId: response.data['id']);
    } on DioException catch (e) {
      return RegistrationResponse(
        error: e.response?.data['message'] ?? 'Registration failed',
      );
    }
  }
}


===================================


Step 5: Create Registration Provider
Create registration_provider.dart for state management:

dart
import 'package:flutter/foundation.dart';
import 'registration_service.dart';
import 'registration_model.dart';

class RegistrationProvider with ChangeNotifier {
  final RegistrationService _service;
  bool _isLoading = false;
  String? _error;
  int? _customerId;

  RegistrationProvider({required RegistrationService service}) : _service = service;

  bool get isLoading => _isLoading;
  String? get error => _error;
  int? get customerId => _customerId;

  Future<void> register({
    required String email,
    required String username,
    required String password,
    required String firstName,
    required String lastName,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    final response = await _service.register(
      RegistrationRequest(
        email: email,
        username: username,
        password: password,
        firstName: firstName,
        lastName: lastName,
      ),
    );

    _isLoading = false;

    if (response.error != null) {
      _error = response.error;
    } else {
      _customerId = response.customerId;
    }

    notifyListeners();
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }
}



========================
Step 6: Create Registration Screen

=================================
Create registration_screen.dart:

dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'registration_provider.dart';

class RegistrationScreen extends StatefulWidget {
  const RegistrationScreen({Key? key}) : super(key: key);

  @override
  _RegistrationScreenState createState() => _RegistrationScreenState();
}

class _RegistrationScreenState extends State<RegistrationScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  final _firstNameController = TextEditingController();
  final _lastNameController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final registrationProvider = Provider.of<RegistrationProvider>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('Create Account')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'Email'),
                keyboardType: TextInputType.emailAddress,
                validator: (value) {
                  if (value?.isEmpty ?? true) return 'Required field';
                  if (!value!.contains('@')) return 'Invalid email';
                  return null;
                },
              ),
              TextFormField(
                controller: _usernameController,
                decoration: const InputDecoration(labelText: 'Username'),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Required field' : null,
              ),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) {
                  if (value?.isEmpty ?? true) return 'Required field';
                  if (value!.length < 6) return 'Minimum 6 characters';
                  return null;
                },
              ),
              TextFormField(
                controller: _firstNameController,
                decoration: const InputDecoration(labelText: 'First Name'),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Required field' : null,
              ),
              TextFormField(
                controller: _lastNameController,
                decoration: const InputDecoration(labelText: 'Last Name'),
                validator: (value) =>
                    value?.isEmpty ?? true ? 'Required field' : null,
              ),
              const SizedBox(height: 20),
              if (registrationProvider.isLoading)
                const Center(child: CircularProgressIndicator())
              else
                ElevatedButton(
                  onPressed: () {
                    if (_formKey.currentState?.validate() ?? false) {
                      registrationProvider.register(
                        email: _emailController.text,
                        username: _usernameController.text,
                        password: _passwordController.text,
                        firstName: _firstNameController.text,
                        lastName: _lastNameController.text,
                      ).then((_) {
                        if (registrationProvider.customerId != null) {
                          // Registration successful
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('Registration successful!'),
                            ),
                          );
                          Navigator.pop(context); // Return to login screen
                        }
                      });
                    }
                  },
                  child: const Text('Register'),
                ),
              if (registrationProvider.error != null)
                Padding(
                  padding: const EdgeInsets.only(top: 16.0),
                  child: Text(
                    registrationProvider.error!,
                    style: const TextStyle(color: Colors.red),
                  ),
                ),
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Already have an account? Login'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _emailController.dispose();
    _usernameController.dispose();
    _passwordController.dispose();
    _firstNameController.dispose();
    _lastNameController.dispose();
    super.dispose();
  }
}
Step 7: Set Up Provider in Main App
Update your main.dart:

dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'registration_provider.dart';
import 'registration_service.dart';
import 'registration_screen.dart';

void main() {
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(
          create: (_) => RegistrationProvider(
            service: RegistrationService(
              baseUrl: 'https://your-wordpress-site.com',
            ),
          ),
        ),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WooCommerce Registration',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const RegistrationScreen(),
    );
  }
}


============================
Step 8: Handle Registration Success


After successful registration, you might want to:

Automatically log the user in

Redirect to a welcome screen

Send a verification email (requires additional setup in WordPress)

Here's how to modify the registration success handler:

dart
if (registrationProvider.customerId != null) {
  // Option 1: Show success message and return to login
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(content: Text('Registration successful! Please login')),
  );
  Navigator.pop(context);
  
  // Option 2: Auto-login (requires auth provider)
  // final authProvider = Provider.of<AuthProvider>(context, listen: false);
  // await authProvider.login(
  //   _usernameController.text,
  //   _passwordController.text,
  // );
  // if (authProvider.isAuthenticated) {
  //   Navigator.pushReplacementNamed(context, '/home');
  // }
}


Step 9: Test Your Implementation
Test with valid data

Test error cases:

Duplicate email

Duplicate username

Weak password

Missing fields

Verify customer is created in WooCommerce admin

Additional Features to Consider
Email Verification:

Install a WordPress plugin like "Email Verification for WooCommerce"

Add verification status to your registration flow


Password Strength Meter:

dart
// Add to your password field
onChanged: (value) {
  // Update password strength UI
},
Terms and Conditions Checkbox:

dart
bool _acceptedTerms = false;

// Add to your form
CheckboxListTile(
  title: Text('I agree to the Terms and Conditions'),
  value: _acceptedTerms,
  onChanged: (value) => setState(() => _acceptedTerms = value ?? false),
),

// Add to your validation
if (!_acceptedTerms) return 'You must accept the terms';
Social Login Integration:

Use plugins like "Nextend Social Login" on WordPress

Integrate with Flutter packages like flutter_facebook_auth or google_sign_in
